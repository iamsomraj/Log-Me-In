{"version":3,"sources":["ColorModeSwitcher.tsx","components/Header/Header.tsx","components/Login/Login.tsx","components/Home/Home.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Header","buttonOptions","fontWeight","href","bg","_hover","isAuthenticated","onLogout","minH","py","base","px","borderBottom","borderStyle","borderColor","align","justify","direction","spacing","justifySelf","Login","useState","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","useEffect","timer","setTimeout","includes","trim","length","clearTimeout","mx","maxW","rounded","boxShadow","p","id","isInvalid","type","value","onChange","event","target","preventDefault","onLogin","isDisabled","Home","as","Box","textAlign","md","sm","lineHeight","App","isLoggedIn","setIsLoggedIn","isAuth","localStorage","getItem","JSON","parse","getLoginStatusFromStorage","theme","setItem","stringify","email","password","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98d70a7c.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { Box, Button, Flex, Stack, useColorModeValue } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { ColorModeSwitcher } from \"../../ColorModeSwitcher\";\r\n\r\ninterface HeaderProps {\r\n  isAuthenticated: boolean;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = (props) => {\r\n  let buttonOptions = (\r\n    <>\r\n      <Button fontSize={\"sm\"} fontWeight={400} href={\"#\"}>\r\n        Sign In\r\n      </Button>\r\n      <Button\r\n        fontSize={\"sm\"}\r\n        fontWeight={600}\r\n        color={\"white\"}\r\n        bg={\"pink.400\"}\r\n        href={\"#\"}\r\n        _hover={{\r\n          bg: \"pink.300\",\r\n        }}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  if (props.isAuthenticated) {\r\n    buttonOptions = (\r\n      <>\r\n        <Button\r\n          onClick={props.onLogout}\r\n          fontSize={\"sm\"}\r\n          fontWeight={600}\r\n          color={\"white\"}\r\n          bg={\"pink.400\"}\r\n          href={\"#\"}\r\n          _hover={{\r\n            bg: \"pink.300\",\r\n          }}\r\n        >\r\n          Logout\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Flex\r\n        bg={useColorModeValue(\"white\", \"gray.800\")}\r\n        color={useColorModeValue(\"gray.600\", \"white\")}\r\n        minH={\"60px\"}\r\n        py={{ base: 2 }}\r\n        px={{ base: 4 }}\r\n        borderBottom={1}\r\n        borderStyle={\"solid\"}\r\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\r\n        align={\"center\"}\r\n      >\r\n        <Stack justify=\"right\" direction={\"row\"} spacing={6}>\r\n          {buttonOptions}\r\n        </Stack>\r\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  Stack,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\ninterface LoginProps {\r\n  onLogin: (email: string, password: string) => void;\r\n}\r\n\r\nconst Login: React.FC<LoginProps> = (props) => {\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  const [emailIsValid, setEmailIsValid] = useState(true);\r\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\r\n  const [passwordIsValid, setPasswordIsValid] = useState(true);\r\n\r\n  const emailChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setEnteredEmail(event.target.value);\r\n  };\r\n\r\n  const passwordChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setEnteredPassword(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setEmailIsValid(enteredEmail.includes(\"@\"));\r\n      setPasswordIsValid(enteredPassword.trim().length > 3);\r\n    }, 500);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [enteredEmail, enteredPassword]);\r\n\r\n  const submitHandler: React.MouseEventHandler<HTMLButtonElement> = (event) => {\r\n    event.preventDefault();\r\n    props.onLogin(enteredEmail, enteredPassword);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      align={\"center\"}\r\n      justify={\"center\"}\r\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n    >\r\n      <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\r\n        <Stack align={\"center\"}>\r\n          <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\r\n        </Stack>\r\n        <Box\r\n          rounded={\"lg\"}\r\n          bg={useColorModeValue(\"white\", \"gray.700\")}\r\n          boxShadow={\"lg\"}\r\n          p={8}\r\n        >\r\n          <Stack spacing={4}>\r\n            <FormControl id=\"email\">\r\n              <FormLabel>Email address</FormLabel>\r\n              <Input\r\n                isInvalid={!emailIsValid}\r\n                type=\"email\"\r\n                value={enteredEmail}\r\n                onChange={emailChangeHandler}\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"password\">\r\n              <FormLabel>Password</FormLabel>\r\n              <Input\r\n                isInvalid={!passwordIsValid}\r\n                type=\"password\"\r\n                value={enteredPassword}\r\n                onChange={passwordChangeHandler}\r\n              />\r\n            </FormControl>\r\n            <Stack spacing={10}>\r\n              <Button\r\n                type=\"submit\"\r\n                onClick={submitHandler}\r\n                isDisabled={!emailIsValid || !passwordIsValid}\r\n                bg={\"blue.400\"}\r\n                color={\"white\"}\r\n                _hover={{\r\n                  bg: \"blue.500\",\r\n                }}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Stack>\r\n          </Stack>\r\n        </Box>\r\n      </Stack>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Box, Container, Heading, Stack, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Container maxW={\"3xl\"}>\r\n      <Stack\r\n        as={Box}\r\n        textAlign={\"center\"}\r\n        spacing={{ base: 8, md: 14 }}\r\n        py={{ base: 20, md: 36 }}\r\n      >\r\n        <Heading\r\n          fontWeight={600}\r\n          fontSize={{ base: \"2xl\", sm: \"4xl\", md: \"6xl\" }}\r\n          lineHeight={\"110%\"}\r\n        >\r\n          Learn React from\r\n          <br />\r\n          <Text as={\"span\"} color={\"green.400\"}>\r\n            one of the easiest courses\r\n          </Text>\r\n        </Heading>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n}\r\n","import { Box, ChakraProvider, theme } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport { useState } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport { useEffect } from \"react\";\nimport Home from \"./components/Home/Home\";\n\nexport const App: React.FC = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const getLoginStatusFromStorage = () => {\n      const isAuth: any = localStorage.getItem(\"isLoggedIn\")\n        ? JSON.parse(localStorage.getItem(\"isLoggedIn\") as any)\n        : null;\n      setIsLoggedIn(isAuth);\n    };\n    getLoginStatusFromStorage();\n  }, []);\n\n  const loginHandler = (email: string, password: string) => {\n    localStorage.setItem(\"isLoggedIn\", JSON.stringify(true));\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    localStorage.setItem(\"isLoggedIn\", JSON.stringify(false));\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Header isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <Box>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home />}\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n"],"sourceRoot":""}