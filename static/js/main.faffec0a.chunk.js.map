{"version":3,"sources":["ColorModeSwitcher.tsx","components/Header/Header.tsx","components/Home/Home.tsx","components/Login/Login.tsx","components/Input/Input.tsx","context/AuthContext.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Header","buttonOptions","fontWeight","href","bg","_hover","isAuthenticated","onLogout","minH","py","base","px","borderBottom","borderStyle","borderColor","align","justify","direction","spacing","justifySelf","Home","maxW","as","Box","textAlign","md","sm","lineHeight","EmailActionTypes","PasswordActionTypes","InputControl","forwardRef","ref","inputRef","useRef","activate","current","focus","useImperativeHandle","id","label","isInvalid","isValid","type","value","onChange","initialStateEmail","initialStatePassword","emailReducer","state","action","USER_EMAIL_INPUT","payload","includes","USER_EMAIL_VALID","passwordReducer","USER_PASSWORD_INPUT","trim","length","USER_PASSWORD_VALID","Login","emailRef","passwordRef","useReducer","emailState","emailDispatch","passwordState","passwordDispatch","useEffect","timer","setTimeout","clearTimeout","mx","rounded","boxShadow","p","Input","event","target","preventDefault","onLogin","AuthContext","React","createContext","isLoggedIn","email","password","AuthContextProvider","useState","setIsLoggedIn","isAuth","localStorage","getItem","JSON","parse","getLoginStatusFromStorage","Provider","setItem","stringify","children","App","authCtx","useContext","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faffec0a.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { Box, Button, Flex, Stack, useColorModeValue } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { ColorModeSwitcher } from \"../../ColorModeSwitcher\";\r\n\r\ninterface HeaderProps {\r\n  isAuthenticated: boolean;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = (props) => {\r\n  let buttonOptions = (\r\n    <>\r\n      <Button fontSize={\"sm\"} fontWeight={400} href={\"#\"}>\r\n        Sign In\r\n      </Button>\r\n      <Button\r\n        fontSize={\"sm\"}\r\n        fontWeight={600}\r\n        color={\"white\"}\r\n        bg={\"pink.400\"}\r\n        href={\"#\"}\r\n        _hover={{\r\n          bg: \"pink.300\",\r\n        }}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  if (props.isAuthenticated) {\r\n    buttonOptions = (\r\n      <>\r\n        <Button\r\n          onClick={props.onLogout}\r\n          fontSize={\"sm\"}\r\n          fontWeight={600}\r\n          color={\"white\"}\r\n          bg={\"pink.400\"}\r\n          href={\"#\"}\r\n          _hover={{\r\n            bg: \"pink.300\",\r\n          }}\r\n        >\r\n          Logout\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Flex\r\n        bg={useColorModeValue(\"white\", \"gray.800\")}\r\n        color={useColorModeValue(\"gray.600\", \"white\")}\r\n        minH={\"60px\"}\r\n        py={{ base: 2 }}\r\n        px={{ base: 4 }}\r\n        borderBottom={1}\r\n        borderStyle={\"solid\"}\r\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\r\n        align={\"center\"}\r\n      >\r\n        <Stack justify=\"right\" direction={\"row\"} spacing={6}>\r\n          {buttonOptions}\r\n        </Stack>\r\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box, Container, Heading, Stack, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Container maxW={\"3xl\"}>\r\n      <Stack\r\n        as={Box}\r\n        textAlign={\"center\"}\r\n        spacing={{ base: 8, md: 14 }}\r\n        py={{ base: 20, md: 36 }}\r\n      >\r\n        <Heading\r\n          fontWeight={600}\r\n          fontSize={{ base: \"2xl\", sm: \"4xl\", md: \"6xl\" }}\r\n          lineHeight={\"110%\"}\r\n        >\r\n          Learn React from\r\n          <br />\r\n          <Text as={\"span\"} color={\"green.400\"}>\r\n            one of the easiest courses\r\n          </Text>\r\n        </Heading>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport InputControl from \"../Input/Input\";\r\nimport { RefObjectType } from \"../Util/type\";\r\n\r\nenum EmailActionTypes {\r\n  USER_EMAIL_INPUT = \"USER_EMAIL_INPUT\",\r\n  USER_EMAIL_VALID = \"USER_EMAIL_VALID\",\r\n}\r\n\r\nenum PasswordActionTypes {\r\n  USER_PASSWORD_INPUT = \"USER_PASSWORD_INPUT\",\r\n  USER_PASSWORD_VALID = \"USER_PASSWORD_VALID\",\r\n}\r\n\r\ninterface UserEmailInputAction {\r\n  type: EmailActionTypes.USER_EMAIL_INPUT;\r\n  payload: string;\r\n}\r\n\r\ninterface UserEmailValidAction {\r\n  type: EmailActionTypes.USER_EMAIL_VALID;\r\n}\r\n\r\ninterface UserPasswordInputAction {\r\n  type: PasswordActionTypes.USER_PASSWORD_INPUT;\r\n  payload: string;\r\n}\r\n\r\ninterface UserPasswordValidAction {\r\n  type: PasswordActionTypes.USER_PASSWORD_VALID;\r\n}\r\n\r\ntype EmailAction = UserEmailInputAction | UserEmailValidAction;\r\ntype PasswordAction = UserPasswordInputAction | UserPasswordValidAction;\r\n\r\ninterface LoginProps {\r\n  onLogin: (email: string, password: string) => void;\r\n}\r\n\r\nconst initialStateEmail = {\r\n  value: \"\",\r\n  isValid: true,\r\n};\r\n\r\nconst initialStatePassword = {\r\n  value: \"\",\r\n  isValid: true,\r\n};\r\n\r\nconst emailReducer = (\r\n  state: {\r\n    value: string;\r\n    isValid: boolean;\r\n  },\r\n  action: EmailAction\r\n) => {\r\n  switch (action.type) {\r\n    case EmailActionTypes.USER_EMAIL_INPUT:\r\n      return {\r\n        value: action.payload,\r\n        isValid: action.payload.includes(\"@\"),\r\n      };\r\n    case EmailActionTypes.USER_EMAIL_VALID:\r\n      return {\r\n        value: state.value,\r\n        isValid: state.value.includes(\"@\"),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst passwordReducer = (\r\n  state: {\r\n    value: string;\r\n    isValid: boolean;\r\n  },\r\n  action: PasswordAction\r\n) => {\r\n  switch (action.type) {\r\n    case PasswordActionTypes.USER_PASSWORD_INPUT:\r\n      return {\r\n        value: action.payload,\r\n        isValid: action.payload.trim().length > 4,\r\n      };\r\n    case PasswordActionTypes.USER_PASSWORD_VALID:\r\n      return {\r\n        value: state.value,\r\n        isValid: state.value.trim().length > 4,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Login: React.FC<LoginProps> = (props) => {\r\n  const emailRef = useRef<RefObjectType>(null);\r\n  const passwordRef = useRef<RefObjectType>(null);\r\n\r\n  const [emailState, emailDispatch] = useReducer(\r\n    emailReducer,\r\n    initialStateEmail\r\n  );\r\n\r\n  const [passwordState, passwordDispatch] = useReducer(\r\n    passwordReducer,\r\n    initialStatePassword\r\n  );\r\n\r\n  const emailChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    emailDispatch({\r\n      type: EmailActionTypes.USER_EMAIL_INPUT,\r\n      payload: event.target.value,\r\n    });\r\n  };\r\n\r\n  const passwordChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    passwordDispatch({\r\n      type: PasswordActionTypes.USER_PASSWORD_INPUT,\r\n      payload: event.target.value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      emailDispatch({\r\n        type: EmailActionTypes.USER_EMAIL_VALID,\r\n      });\r\n      passwordDispatch({\r\n        type: PasswordActionTypes.USER_PASSWORD_VALID,\r\n      });\r\n    }, 500);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [emailState.value, passwordState.value]);\r\n\r\n  const submitHandler: React.MouseEventHandler<HTMLButtonElement> = (event) => {\r\n    event.preventDefault();\r\n    if (!emailState.isValid) {\r\n      if (emailRef.current) {\r\n        emailRef.current.focus();\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!passwordState.isValid) {\r\n      if (passwordRef.current) {\r\n        passwordRef.current.focus();\r\n      }\r\n      return;\r\n    }\r\n    props.onLogin(emailState.value, passwordState.value);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      align={\"center\"}\r\n      justify={\"center\"}\r\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n    >\r\n      <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\r\n        <Stack align={\"center\"}>\r\n          <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\r\n        </Stack>\r\n        <Box\r\n          rounded={\"lg\"}\r\n          bg={useColorModeValue(\"white\", \"gray.700\")}\r\n          boxShadow={\"lg\"}\r\n          p={8}\r\n        >\r\n          <Stack spacing={4}>\r\n            <InputControl\r\n              ref={emailRef}\r\n              id=\"email\"\r\n              isValid={emailState.isValid}\r\n              label=\"Email Address\"\r\n              onChange={emailChangeHandler}\r\n              type=\"email\"\r\n              value={emailState.value}\r\n            />\r\n            <InputControl\r\n              ref={passwordRef}\r\n              id=\"password\"\r\n              isValid={passwordState.isValid}\r\n              label=\"Password\"\r\n              onChange={passwordChangeHandler}\r\n              type=\"password\"\r\n              value={passwordState.value}\r\n            />\r\n            <Stack spacing={10}>\r\n              <Button\r\n                type=\"submit\"\r\n                onClick={submitHandler}\r\n                bg={\"blue.400\"}\r\n                color={\"white\"}\r\n                _hover={{\r\n                  bg: \"blue.500\",\r\n                }}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Stack>\r\n          </Stack>\r\n        </Box>\r\n      </Stack>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { FormControl, FormLabel, Input } from \"@chakra-ui/react\";\r\nimport React, { forwardRef, Ref } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useImperativeHandle } from \"react\";\r\nimport { RefObjectType } from \"../Util/type\";\r\n\r\ninterface InputControlProps {\r\n  id: string;\r\n  ref: Ref<RefObjectType>;\r\n  label: string;\r\n  isValid: boolean;\r\n  type: string;\r\n  value: string;\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nconst InputControl: React.FC<InputControlProps> = forwardRef(\r\n  (props, ref: Ref<RefObjectType>) => {\r\n    const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n    const activate = () => {\r\n      if (inputRef && inputRef.current) inputRef.current.focus();\r\n    };\r\n\r\n    useImperativeHandle(ref, () => {\r\n      return {\r\n        focus: activate,\r\n      };\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <FormControl id={props.id}>\r\n          <FormLabel>{props.label}</FormLabel>\r\n          <Input\r\n            ref={inputRef}\r\n            isInvalid={!props.isValid}\r\n            type={props.type}\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n          />\r\n        </FormControl>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default InputControl;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogin: (email: string, password: string) => {},\r\n  onLogout: () => {},\r\n});\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthContextProvider: React.FC = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getLoginStatusFromStorage = () => {\r\n      const isAuth: any = localStorage.getItem(\"isLoggedIn\")\r\n        ? JSON.parse(localStorage.getItem(\"isLoggedIn\") as any)\r\n        : null;\r\n      setIsLoggedIn(isAuth);\r\n    };\r\n    getLoginStatusFromStorage();\r\n  }, []);\r\n\r\n  const loginHandler = (email: string, password: string) => {\r\n    localStorage.setItem(\"isLoggedIn\", JSON.stringify(true));\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    setIsLoggedIn(false);\r\n    localStorage.setItem(\"isLoggedIn\", JSON.stringify(false));\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn: isLoggedIn,\r\n        onLogin: loginHandler,\r\n        onLogout: logoutHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import { Box, ChakraProvider, theme } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport AuthContext from \"./context/AuthContext\";\n\nexport const App: React.FC = () => {\n  const authCtx = useContext(AuthContext);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Header\n        isAuthenticated={authCtx.isLoggedIn}\n        onLogout={authCtx.onLogout}\n      />\n      <Box>\n        {!authCtx.isLoggedIn && <Login onLogin={authCtx.onLogin} />}\n        {authCtx.isLoggedIn && <Home />}\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { AuthContextProvider } from \"./context/AuthContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthContextProvider>\n      <ColorModeScript />\n      <App />\n    </AuthContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}